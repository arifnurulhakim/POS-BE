// generator client {
//   provider = "prisma-client-js"
//   output   = "../src/generated/prisma"
// }

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(uuid()) @db.VarChar(110)
  name              String
  email             String           @unique
  password          String
  resetToken        String?          // Token reset password
  resetTokenExpiry  DateTime?        // Expiry token
  created_at        DateTime         @default(now())
  passwordResets    PasswordReset[]  // Relasi balik ke PasswordReset
  transactions      Transaction[]    // Relasi ke transaksi
}

model PasswordReset {
  id         String   @id @default(uuid()) @db.VarChar(110)
  userId     String   @db.VarChar(110)
  resetToken String
  expiresAt  DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model Product {
  id                 String             @id @default(uuid()) @db.VarChar(110)
  name               String
  description        String?
  price              Float
  stock              Int
  image_url          String?
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  transactions_items TransactionsItem[]
}

model Transaction {
  id                 String              @id @default(uuid()) @db.VarChar(110)
  userId             String              @db.VarChar(110)
  total              Float
  status             transactions_status
  customer_name      String
  customer_email     String
  snap_token         String?
  snap_redirect_url  String?
  payment_method     String?
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  user               User                @relation(fields: [userId], references: [id])
  transactions_items TransactionsItem[]
}

model TransactionsItem {
  id             String      @id @default(uuid()) @db.VarChar(110)
  transaction_id String      @db.VarChar(110)
  product_id     String      @db.VarChar(110)
  product_name   String
  price          Float
  quantity       Int
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  transaction    Transaction @relation(fields: [transaction_id], references: [id])
  product        Product     @relation(fields: [product_id], references: [id])

  @@index([product_id])
  @@index([transaction_id])
}

enum transactions_status {
  PENDING_PAYMENT
  PAID
  CANCELED
}